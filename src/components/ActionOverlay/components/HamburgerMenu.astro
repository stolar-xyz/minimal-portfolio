---
import CrossIcon from '@/assets/icons/cross.svg';
import MenuIcon from '@/assets/icons/menu.svg';
---

<button
  id="menu-toggle"
  class="group relative xl:hidden"
  aria-label="Menu"
  aria-expanded="false"
  aria-controls="navigation"
>
  <MenuIcon
    class="transition-icon absolute z-1 group-aria-expanded:-z-1 group-aria-expanded:scale-75 group-aria-expanded:rotate-90 group-aria-expanded:opacity-0"
  />
  <CrossIcon
    class="transition-icon not-group-aria-expanded:scale-75 not-group-aria-expanded:-rotate-90 not-group-aria-expanded:opacity-0"
  />
</button>

<script>
  import { MIN_XL_BREAKPOINT } from '@/lib/consts';

  let isOpen = false;
  const menuToggle = document.getElementById('menu-toggle');
  const gridLayout = document.getElementById('grid-layout');
  const navigation = document.getElementById('navigation');
  const viewCvLink = document.getElementById('view-cv-link');

  const setMenuState = () => {
    document.documentElement.classList.toggle('overflow-y-hidden', isOpen);
    document.documentElement.classList.toggle('touch-none', isOpen);
    menuToggle?.setAttribute('aria-expanded', String(isOpen));
    gridLayout?.setAttribute('aria-hidden', String(isOpen));
    navigation?.setAttribute('aria-hidden', String(!isOpen));
    viewCvLink?.setAttribute('aria-hidden', String(!isOpen));
  };

  const onToggle = () => {
    isOpen = !isOpen;
    setMenuState();
  };

  menuToggle?.addEventListener('click', event => {
    event.stopPropagation();
    onToggle();
  });

  document.addEventListener('click', ({ target }) => {
    if (!isOpen || !(target instanceof Node)) return;

    const isClickInsideToast = document
      .getElementById('toast-container')
      ?.contains(target);
    const isClickInsideNavigation = navigation?.contains(target);
    const isClickInsideCvLink = viewCvLink?.contains(target);

    if (!isClickInsideToast) {
      onToggle();

      if (isClickInsideNavigation || isClickInsideCvLink) {
        const { activeElement } = document;

        if (activeElement instanceof HTMLElement) {
          activeElement.blur();
        }
      }
    }
  });

  document.addEventListener('keydown', ({ key }) => {
    if (key === 'Escape' && isOpen) {
      onToggle();
    }
  });

  window
    .matchMedia(MIN_XL_BREAKPOINT)
    .addEventListener('change', ({ matches }) => {
      if (matches && isOpen) {
        isOpen = false;
        menuToggle?.setAttribute('aria-expanded', 'false');
        gridLayout?.setAttribute('aria-hidden', 'false');
        document.documentElement.classList.remove(
          'overflow-y-hidden',
          'touch-none',
        );
      }
    });
</script>
