---
/* eslint-disable astro/no-unused-css-selector */
import { pageSections } from '@/lib/consts';
---

<nav>
  {pageSections.map(({ id, label }) => <a href={`#${id}`}>{label}</a>)}
</nav>

<style>
  nav {
    position: fixed;
    top: 1rem;
    left: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    z-index: 1000;
  }

  nav a {
    position: relative;
    text-decoration: none;
    color: var(--text-2);
    padding-left: 1.2em;
    transition: color 0.2s ease;
    text-transform: lowercase;
  }

  nav a.active::before {
    content: '#';
    margin-right: 4px;
    color: var(--text-1);
  }

  nav a.active {
    color: var(--text-1);
  }
</style>

<script is:inline>
  const navLinks = document.querySelectorAll('nav a');
  const hash = location.hash;
  [...navLinks]
    .find(link => hash === link.getAttribute('href') || hash === '')
    ?.classList.add('active');
</script>

<script>
  const sections = document.querySelectorAll<HTMLElement>('section');
  const navLinks = document.querySelectorAll<HTMLAnchorElement>('nav a');
  const getLinkSectionId = (link: HTMLAnchorElement) =>
    link.getAttribute('href')?.substring(1) ?? '';

  let currentHash = location.hash.replace('#', '');
  let targetHash: string | null = null;

  navLinks.forEach(link => {
    link.addEventListener('click', () => {
      const id = getLinkSectionId(link);
      targetHash = id;
    });
  });

  const observer = new IntersectionObserver(
    entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = entry.target.id;

          navLinks.forEach(link => {
            const linkTarget = getLinkSectionId(link);
            link.classList.toggle('active', linkTarget === id);
          });

          const isTargetHash = targetHash === null || targetHash === id;
          const isCurrentHash = currentHash === id;

          if (isTargetHash && !isCurrentHash) {
            history.replaceState(null, '', `#${id}`);
            currentHash = id;
            targetHash = null;
          }
        }
      });
    },
    {
      threshold: 0.75,
    },
  );

  sections.forEach(section => observer.observe(section));
</script>
