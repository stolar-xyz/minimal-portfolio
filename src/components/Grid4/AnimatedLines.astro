---
type Props = {
  lines: number;
  delayStep: number; // Np. 0.08s dla bardziej subtelnej fali
  direction: 'up' | 'down';
};

const { lines, delayStep, direction } = Astro.props;
---

{
  Array.from({ length: lines }).map((_, index) => {
    const middlePoint = (lines - 1) / 2;
    const distanceFromMiddle = Math.abs(index - middlePoint);

    // ULEPSZENIE: Delikatniejszy, nieliniowy staggering dla efektu fali
    const adjustedDistance = Math.pow(distanceFromMiddle, 1.6); // Wyższa potęga dla większej różnicy między środkiem a brzegami
    const animationDelayValue = (adjustedDistance * delayStep).toFixed(3);
    const animationDelay = `${animationDelayValue}s`;

    return (
      <div
        class="lines elegant-slide"
        style={{ animationDelay }}
        class:list={{
          'left-edge': index === 0,
          'right-edge': index === lines - 1,
          'lines-up': direction === 'up',
          'lines-down': direction === 'down',
        }}
      />
    );
  })
}

<style>
  .lines { /* Wspólne style dla wszystkich linii */
    opacity: 0;
    border-right: 1px solid var(--grid-overlay-color, rgba(200, 200, 255, 0.7)); /* Domyślny kolor, jeśli nie zdefiniowany wyżej */
    border-left: 1px solid var(--grid-overlay-color, rgba(200, 200, 255, 0.7));
  }

  .left-edge {
    border-left: unset;
  }

  .right-edge {
    border-right: unset;
  }

  .elegant-slide.lines-down {
    transform-origin: top;
    /* ULEPSZENIE: Dłuższa animacja z bardzo łagodnym easingiem "easeOutQuint" */
    animation: slide-in 1.8s cubic-bezier(0.23, 1, 0.32, 1) forwards;
  }

  .elegant-slide.lines-up {
    transform-origin: bottom;
    animation: slide-in 1.8s cubic-bezier(0.23, 1, 0.32, 1) forwards;
  }

  @keyframes slide-in {
    0% {
      transform: scaleY(0);
      opacity: 0;
    }
    30% {
      /* Opóźnione pojawienie się opacity, aby ruch był bardziej "ślizgający" niż "rosnący" */
      opacity: 0.5;
    }
    100% {
      transform: scaleY(1);
      opacity: 1;
    }
  }
</style>