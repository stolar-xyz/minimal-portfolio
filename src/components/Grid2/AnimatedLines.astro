---
type Props = {
  lines: number;
  delayStep: number;
  direction: 'up' | 'down';
};

const { lines, delayStep, direction } = Astro.props;
---

{
  Array.from({ length: lines }).map((_, index) => {
    const middlePoint = (lines - 1) / 2;
    const distanceFromMiddle = Math.abs(index - middlePoint);

    // ULEPSZENIE 1: Nieliniowe opóźnienie
    // Używamy Math.pow, aby opóźnienie rosło szybciej dla bardziej oddalonych linii
    // Możesz eksperymentować z potęgą (np. 1.2, 1.5)
    const adjustedDistance = Math.pow(distanceFromMiddle, 1.3);
    const animationDelayValue = (adjustedDistance * delayStep).toFixed(3); // Większa precyzja
    const animationDelay = `${animationDelayValue}s`;

    // Możemy dodać dynamiczną długość animacji, jeśli chcemy
    // const animationDuration = `${(1 + distanceFromMiddle * 0.05).toFixed(2)}s`;
    // Ale na razie zostawmy stałą długość w CSS

    return (
      <div
        class="lines"
        style={{ animationDelay /*, animationDuration */ }}
        class:list={{
          'left-edge': index === 0,
          'right-edge': index === lines - 1,
          'lines-up': direction === 'up',
          'lines-down': direction === 'down',
        }}
      />
    );
  })
}

<style>
  .lines {
    opacity: 0;
    border-right: 1px solid var(--grid-overlay-color);
    border-left: 1px solid var(--grid-overlay-color);
    /* Propozycja: Dodanie delikatnego cienia/blasku dla linii, jeśli kolor na to pozwala */
    /* box-shadow: var(--grid-overlay-glow); */
  }

  .left-edge {
    border-left: unset;
  }

  .right-edge {
    border-right: unset;
  }

  .lines-down {
    transform-origin: top;
    /* ULEPSZENIE 2: Zmiana easingu i czasu trwania animacji */
    animation: scale-lines 1.2s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
    /* cubic-bezier(0.68, -0.55, 0.265, 1.55) to tzw. "easeInBack" z lekkim "odbiciem" na końcu */
    /* Inne ciekawe opcje: */
    /* cubic-bezier(0.76, 0, 0.24, 1)  - "easeInOutQuint" - mocniejsze przyspieszenie i zwolnienie */
    /* cubic-bezier(0.23, 1, 0.32, 1)   - "easeOutCirc" - bardziej "sprężyste" wyjście */
  }

  .lines-up {
    transform-origin: bottom;
    animation: scale-lines 1.2s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
  }

  /* ULEPSZENIE 3: Bardziej złożone klatki kluczowe (opcjonalnie) */
  @keyframes scale-lines {
    0% {
      transform: scaleY(0);
      opacity: 0;
    }
    /* Możemy dodać pośredni krok, aby kontrolować np. opacity */
    60% {
      /* Linia staje się w pełni widoczna zanim osiągnie pełną wysokość */
      opacity: 1;
    }
    100% {
      transform: scaleY(1);
      opacity: 1;
    }
  }

  /* Alternatywne klatki kluczowe dla bardziej "gumowego" efektu z easingiem easeInOutQuint */
  /*
  @keyframes scale-lines {
    0% {
      transform: scaleY(0);
      opacity: 0;
    }
    70% {
      transform: scaleY(1.05); // Lekkie przekroczenie
      opacity: 1;
    }
    100% {
      transform: scaleY(1);
      opacity: 1;
    }
  }
  */
</style>
