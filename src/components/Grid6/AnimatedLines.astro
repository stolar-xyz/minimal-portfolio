---
type Props = {
  lines: number;
  delayStep: number;
  direction: 'up' | 'down';
  cubicBezier?: string;
};

const { lines, delayStep, direction, cubicBezier } = Astro.props;
---

{
  Array.from({ length: lines }).map((_, index) => {
    const middlePoint = (lines - 1) / 2;
    const distanceFromMiddle = Math.abs(index - middlePoint);
    const animationDelayValue = (distanceFromMiddle * delayStep).toFixed(3);
    const animationDelay = `${animationDelayValue}s`;

    return (
      <div
        class="lines"
        style={{ animationDelay }}
        class:list={{
          'left-edge': index === 0,
          'right-edge': index === lines - 1,
          'lines-up': direction === 'up',
          'lines-down': direction === 'down',
        }}
      />
    );
  })
}

<style define:vars={{ 'cubic-bezier': cubicBezier }}>
  .lines {
    opacity: 0;
    border-right: 1px solid var(--grid-overlay-color);
    border-left: 1px solid var(--grid-overlay-color);
  }

  .left-edge {
    border-left: unset;
  }

  .right-edge {
    border-right: unset;
  }

  .lines-down,
  .lines-up {
    animation: lines-appear 1s cubic-bezier(var(--cubic-bezier)) forwards;
  }

  .lines-down {
    transform-origin: top;
  }

  .lines-up {
    transform-origin: bottom;
  }

  @keyframes lines-appear {
    from {
      transform: scaleY(0);
      opacity: 0;
    }
    to {
      transform: scaleY(1);
      opacity: 1;
    }
  }
</style>
